{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"method_",
				"method_with_block\tabc"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "#include <unistd.h>\n#include <setjmp.h>\n#include <signal.h>\n#include <string.h>\n#include <netdb.h>\n#include <netinet/in.h>\n\n#include <sys/types.h>\n#include <sys/socket.h>\n\n#include <time.h>\n#include \"bandwidthd.h\"\n\n#ifdef HAVE_ARPA_NAMESER_H\n#include <arpa/nameser.h>\n#endif\n#ifdef HAVE_RESOLV_H\n#include <resolv.h>\n#endif\n\nextern unsigned int SubnetCount;\nextern struct config config;\n\njmp_buf dnsjump;\n\nstatic void rdnslngjmp(int signal);\n\nvoid rdns(char *Buffer, unsigned long IP)  // This takes over sigalarm!\n\t{\n#ifdef HAVE_RESOLV_H\n\tchar DNSError[] = \"DNS Timeout: Correct to speed up graphing\";\n\tchar None[] = \"Configure DNS to reverse this IP\";\n\tchar TooManyDNSTimeouts[] = \"Too many dns timeouts, reverse lookups suspended\";\n\tstruct hostent *hostent;\n\tchar chrIP[50];\n\tstatic int Init = TRUE;\n\tstatic int DNSTimeouts = 0;  // This is reset for each run because we're forked\n\tunsigned long addr = htonl(IP);\n\n    _res.retrans = 1;\n    _res.retry = 2;\n\n\tif (Init)\n\t\t{\n        signal(SIGALRM, rdnslngjmp);\n\t\tInit = FALSE;\n\t\t}\n\n\tif (DNSTimeouts > 100)\n\t\t{\n\t\tsyslog(LOG_ERR, \"Too many dns timeouts, reverse lookups suspended\");\n        strncpy(Buffer, TooManyDNSTimeouts, 253);\n\t\tBuffer[254] = '\\0';\n\t\treturn;\n\t\t}\t\t\n\n\tif (setjmp(dnsjump) == 0)\n\t\t{\n\t\talarm(10);  // Don't let gethostbyaddr hold us up too long\n\t\thostent = gethostbyaddr((char *) &addr, 4, AF_INET); // (char *)&Data->IP\t\t\t\t\n\t\talarm(0);\n\t\t\n\t\tif (hostent)\n\t\t\tsprintf(Buffer, \"%s\", hostent->h_name);\n\t\telse\n\t\t\t{\n\t        strncpy(Buffer, None, 253);\n\t\t\tBuffer[254] = '\\0';\n\t\t\t}\n\t\t}\n\telse  // Our alarm timed out\n\t\t{\n\t\tHostIp2CharIp(IP, chrIP);\n\t\tsyslog(LOG_ERR, \"DNS timeout for %s: This problem reduces graphing performance\", chrIP);\n\t\tDNSTimeouts++;\n        strncpy(Buffer, DNSError, 253);\n\t\tBuffer[254] = '\\0';\n\t\t}\n#else\n\tBuffer[0] = '\\0';\n#endif\n\t}\n\nstatic void rdnslngjmp(int signal)\n\t{\n    longjmp(dnsjump, 1);\n\t}\n\nvoid swap(struct SummaryData **a, struct SummaryData **b) {\n\tstruct SummaryData *temp;\n    temp = *a; *a = *b; *b = temp;\n}\nvoid QuickSortSummaryData(struct SummaryData *SummaryData[], int left, int right) {\n    int i,j,center;\n    unsigned long long pivot;\n    if (left==right) return;\n    if (left+1==right) {\n        if (SummaryData[left]->Total < SummaryData[right]->Total)\n            swap(&SummaryData[left],&SummaryData[right]);\n        return;\n    }\n    /* use the median-of-three method for picking pivot */\n    center = (left+right)/2;\n    if (SummaryData[left]->Total < SummaryData[center]->Total)\n        swap(&SummaryData[left],&SummaryData[center]);\n    if (SummaryData[left]->Total < SummaryData[right]->Total)\n        swap(&SummaryData[left],&SummaryData[right]);\n    if (SummaryData[center]->Total < SummaryData[right]->Total)\n        swap(&SummaryData[center],&SummaryData[right]);\n    pivot = SummaryData[center]->Total;\n    swap(&SummaryData[center],&SummaryData[right-1]); /* hide the pivot */\n    i = left; j = right - 1;\n    do {\n        do { ++i; } while (SummaryData[i]->Total > pivot);\n        do { --j; } while (SummaryData[j]->Total < pivot);\n        swap(&SummaryData[i],&SummaryData[j]);\n    } while (j > i);\n    swap(&SummaryData[i],&SummaryData[j]); /* undo last swap */\n    swap(&SummaryData[i],&SummaryData[right-1]); /* restore pivot */\n    QuickSortSummaryData(SummaryData,left,i-1);\n    QuickSortSummaryData(SummaryData,i+1,right);\n}\n\n#define NumFactor 1024\nstatic void FormatNum(unsigned long long n, char *buf, int len) {\n    double f;\n    if (n<NumFactor) { snprintf(buf,len,\"<td align=\\\"right\\\"><tt>%i&nbsp;</tt></td>\",(int)n); return; }\n    f = n;\n    f /= NumFactor; if (f<NumFactor) { snprintf(buf,len,\"<td align=\\\"right\\\"><tt>%.1fK</tt></td>\",f); return; }\n    f /= NumFactor; if (f<NumFactor) { snprintf(buf,len,\"<td align=\\\"right\\\"><tt>%.1fM</tt></td>\",f); return; }\n    f /= NumFactor; if (f<NumFactor) { snprintf(buf,len,\"<td align=\\\"right\\\"><tt>%.1fG</tt></td>\",f); return; }\n    f /= NumFactor; snprintf(buf,len,\"<td align=\\\"right\\\"><tt>%.1fT</tt></td>\\n\",f);\n}\n\nvoid PrintTableLine(FILE *stream, struct SummaryData *Data, int Counter)\n\t{\n\tchar Buffer1[50];\n\tchar Buffer1b[50];\n\tchar Buffer2[50];\n\tchar Buffer3[50];\n\tchar Buffer4[50];\n\tchar Buffer4b[50];\n\tchar Buffer5[50];\n\tchar Buffer5b[50];\n\tchar Buffer6[50];\n\tchar Buffer7[50];\n\tchar Buffer8[50];\n//\tchar IPHostName[50];\n\n\t// First convert the info to nice, human readable stuff\n\trdns(Buffer1b, Data->IP);\n\tif (Data->IP == 0)\n\t\tstrcpy(Buffer1, \"Total\");\n\t\t// For 0, the totals row, the output of rdns will be overwritten.\n\t\tBuffer1b[0]='\\0';\n\t\tstrcpy(Buffer1b, \"\"); \n\telse\n\t\tHostIp2CharIp(Data->IP, Buffer1);\n        // strcat(Buffer1, \"-\");\n\t\t// strcat(Buffer1, IPHostName);\n\n    FormatNum(Data->Total,         Buffer2,  50);\n\tFormatNum(Data->TotalSent,     Buffer3,  50);\n\tFormatNum(Data->TotalReceived, Buffer4,  50);\n\tFormatNum(Data->FTP, \t\t   Buffer4b, 50);\n\tFormatNum(Data->HTTP,          Buffer5,  50);\n\tFormatNum(Data->P2P,           Buffer5b, 50);\n\tFormatNum(Data->TCP,           Buffer6,  50);\n\tFormatNum(Data->UDP,           Buffer7,  50);\n\tFormatNum(Data->ICMP,          Buffer8,  50);\n\n\tif (Counter%4 == 0 || (Counter-1)%4 == 0)\n\t\tfprintf(stream, \"<TR>\");\n\telse\n\t\tfprintf(stream, \"<TR bgcolor=lightblue>\");\n\n\tif (Data->Graph)\n\t\tfprintf(stream, \"<TD><a href=\\\"#%s-%c\\\">%s</a></TD>%s%s%s%s%s%s%s%s%s</TR>\\n\",\n\t\t\tBuffer1, // Ip\n\t\t\tconfig.tag,\n\t\t\tBuffer1b, // Ip\n\t\t\tBuffer2, // Total\n\t\t\tBuffer3, // TotalSent\n\t\t\tBuffer4, // TotalReceived\n\t\t\tBuffer4b, // FTP\n\t\t\tBuffer5, // HTTP\n\t\t\tBuffer5b, // P2P\n\t\t\tBuffer6, // TCP\n\t\t\tBuffer7, // UDP\n\t\t\tBuffer8); // ICMP\n\telse\n\t\tfprintf(stream, \"<TD>%s</TD>%s%s%s%s%s%s%s%s%s</TR>\\n\",\n\t\t\tBuffer1, // Ip\n\t\t\tBuffer2, // Total\n\t\t\tBuffer3, // TotalSent\n\t\t\tBuffer4, // TotalReceived\n\t\t\tBuffer4b, // FTP\n\t\t\tBuffer5, // HTTP\n\t\t\tBuffer5b, // P2P\t\t\n\t\t\tBuffer6, // TCP\n\t\t\tBuffer7, // UDP\n\t\t\tBuffer8); // ICMP\n\t}\n\nvoid MakeIndexPages(int NumIps, struct SummaryData *SummaryData[])\n\t{\n\tint SubnetCounter;\n\tint Counter, tCounter;\n\ttime_t WriteTime;\n\tchar filename[] = \"./htdocs/index2.html\";\n\tchar *PeriodDesc;\n\t\n\tFILE *file;\n\n\tchar Buffer1[50];\n\tchar Buffer2[50];\n\tchar HostName[255];\n\n\tWriteTime = time(NULL);\n\t\n\tQuickSortSummaryData(SummaryData, 0, NumIps-1);\n\n\t////////////////////////////////////////////////\n\t// Print main index page\n\t\n\tif (config.tag == '1')\n\t\t{\n\t\tif ((file = fopen(\"./htdocs/index.html\", \"wt\")) == NULL)\n\t\t\t{\n\t\t\tsyslog(LOG_ERR, \"Failed to open ./htdocs/index.html\");\n\t\t\texit(1);\n\t\t\t}\n\t\t}\n\telse\n\t\t{\n\t\tfilename[14] = config.tag;\n\t\tif ((file = fopen(filename, \"wt\")) == NULL)\n\t\t\t{\n\t\t\tsyslog(LOG_ERR, \"Failed to open %s\", filename);\n\t\t\texit(1);\n\t\t\t}\n\t\t}\n\n\tswitch (config.tag)\n\t\t{\n\t\tcase '1': PeriodDesc = \"Daily\"; break;\n\t\tcase '2': PeriodDesc = \"Weekly\"; break;\n\t\tcase '3': PeriodDesc = \"Monthly\"; break;\n\t\tcase '4': PeriodDesc = \"Yearly\"; break;\n\t\tdefault: PeriodDesc = \"\"; break;\n\t\t}\n\t\n\tfprintf(file, \"<!DOCTYPE HTML PUBLIC \\\"-//W3C//DTD HTML 4.01 Transitional//EN\\\">\\n\");\n\tfprintf(file, \"<HTML>\\n<HEAD>\\n<TITLE>Bandwidthd</TITLE>\\n\");\n\n\tif (config.meta_refresh)\n\t\tfprintf(file, \"<META HTTP-EQUIV=\\\"REFRESH\\\" content=\\\"%u\\\">\\n\",\n\t\t\t\tconfig.meta_refresh);\n\tfprintf(file, \"<META HTTP-EQUIV=\\\"EXPIRES\\\" content=\\\"-1\\\">\\n\");\n\tfprintf(file, \"<META HTTP-EQUIV=\\\"PRAGMA\\\" content=\\\"no-cache\\\">\\n\");\n\tfprintf(file, \"</HEAD>\\n<BODY vlink=blue>\\n%s<br>\\n<center><img src=\\\"logo.gif\\\" ALT=\\\"Logo\\\"><BR>\\n\", ctime(&WriteTime));\n\tfprintf(file, \"Programmed by David Hinkle, Commissioned by <a href=\\\"http://www.derbytech.com\\\">DerbyTech</a> wireless networking.<BR>\");\n\tfprintf(file, \"<BR>\\n - <a href=\\\"index.html\\\">Daily</a> -- <a href=\\\"index2.html\\\">Weekly</a> -- \");\n\tfprintf(file, \"<a href=\\\"index3.html\\\">Monthly</a> -- <a href=\\\"index4.html\\\">Yearly</a> - <BR>\\n\");\n\n\tfprintf(file, \"<BR>\\nPick a Subnet:<BR>\\n\");\t\n\tif (config.tag == '1')\n\t\tfprintf(file, \"- <a href=\\\"index.html\\\">Top20</a> -\");\n\telse\n\t\tfprintf(file, \"- <a href=\\\"index%c.html\\\">Top20</a> -\", config.tag);\n\n\tfor (Counter = 0; Counter < SubnetCount; Counter++)            \n\t\t{\n\t\tHostIp2CharIp(SubnetTable[Counter].ip, Buffer1);\n\t\tfprintf(file, \"- <a href=\\\"Subnet-%c-%s.html\\\">%s</a> -\", config.tag, Buffer1, Buffer1);\n\t\t}\n\n\t/////  TOP 20\n\n\tfprintf(file, \"<H1>Top 20 IPs by Traffic - %s</H1></center>\", PeriodDesc);\n\tfprintf(file, \"<center>\\n<table width=\\\"100%%\\\" border=1 cellspacing=0>\\n\");\n\n    // PASS 1:  Write out the table\n\n\tfprintf(file, \"<TR bgcolor=lightblue><TD>Ip and Name<TD align=center>Total<TD align=center>Total Sent<TD align=center>Total Received<TD align=center>FTP<TD align=center>HTTP<TD align=center>P2P<TD align=center>TCP<TD align=center>UDP<TD align=center>ICMP\\n\");\n\tfor (Counter=0; Counter < 21 && Counter < NumIps; Counter++)\n\t\tPrintTableLine(file, SummaryData[Counter], Counter);\n\n\tfprintf(file, \"</table></center>\\n\");\n\n\t// PASS 2: The graphs\n\tfor (Counter=0; Counter < 21 && Counter < NumIps; Counter++)\n\t\tif (SummaryData[Counter]->Graph)\n\t\t\t{\n\t\t\tif (SummaryData[Counter]->IP == 0)\n\t\t\t\t{\n\t\t\t\tstrcpy(Buffer1, \"Total\");\t\n\t\t\t\tstrcpy(HostName, \"Total of all subnets\");\n\t\t\t\t}\n\t\t\telse\n\t\t\t\t{\t\n\t\t\t\tHostIp2CharIp(SummaryData[Counter]->IP, Buffer1);\n\t\t\t\trdns(HostName, SummaryData[Counter]->IP);\n\t\t\t\t}\n\t\t\tfprintf(file, \"<a name=\\\"%s-%c\\\"></a><H1><a href=\\\"#top\\\">(Top)</a> %s - %s</H1><BR>\\nSend:<br>\\n<img src=%s-%c-S.png ALT=\\\"Sent traffic for %s\\\"><BR>\\n<img src=legend.gif ALT=\\\"Legend\\\"><br>\\nReceived:<br>\\n<img src=%s-%c-R.png ALT=\\\"Sent traffic for %s\\\"><BR>\\n<img src=legend.gif ALT=\\\"Legend\\\"><br>\\n<BR>\\n\", Buffer1, config.tag, Buffer1, HostName, Buffer1, config.tag, Buffer1, Buffer1, config.tag, Buffer1);\n\t\t\t}\n\n\tfprintf(file, \"</BODY></HTML>\\n\");\n\n\tfclose(file);\n\n\t////////////////////////////////////////////////\n\t// Print each subnet page\n\n\tfor (SubnetCounter = 0; SubnetCounter < SubnetCount; SubnetCounter++)\n\t\t{\n\t\tHostIp2CharIp(SubnetTable[SubnetCounter].ip, Buffer1);\n\t\tsprintf(Buffer2, \"./htdocs/Subnet-%c-%s.html\", config.tag, Buffer1);\n\t\tfile = fopen(Buffer2, \"wt\");\n\t\tfprintf(file, \"<!DOCTYPE HTML PUBLIC \\\"-//W3C//DTD HTML 4.01 Transitional//EN\\\">\\n\");\n\t\tfprintf(file, \"<HTML>\\n<HEAD><TITLE>Bandwidthd - Subnet %s</TITLE>\\n\", Buffer1);\n\n\t\tif (config.meta_refresh)\n\t\t\tfprintf(file, \"<META HTTP-EQUIV=\\\"REFRESH\\\" content=\\\"%u\\\">\\n\",\n\t\t\t\t\tconfig.meta_refresh);\n\t\tfprintf(file, \"<META HTTP-EQUIV=\\\"EXPIRES\\\" content=\\\"-1\\\">\\n\");\n\t\tfprintf(file, \"<META HTTP-EQUIV=\\\"PRAGMA\\\" content=\\\"no-cache\\\">\\n\");\n\t\tfprintf(file, \"</HEAD>\\n<BODY vlink=blue>\\n%s<br>\\n<CENTER><a name=\\\"Top\\\"></a>\", ctime(&WriteTime));\n\t\tfprintf(file, \"<img src=\\\"logo.gif\\\" ALT=\\\"Logo\\\"><BR>\");\n\t\tfprintf(file, \"Programmed by David Hinkle, Commissioned by <a href=\\\"http://www.derbytech.com\\\">DerbyTech</a> wireless networking.<BR>\\n\");\n\n\t\tfprintf(file, \"<BR>\\n - <a href=\\\"index.html\\\">Daily</a> -- <a href=\\\"index2.html\\\">Weekly</a> -- \");\n\t\tfprintf(file, \"<a href=\\\"index3.html\\\">Monthly</a> -- <a href=\\\"index4.html\\\">Yearly</a> - <BR>\\n\");\n\n\t\tfprintf(file, \"<BR>\\nPick a Subnet:<BR>\\n\");\n\t\tif (config.tag == '1')\n\t\t\tfprintf(file, \"- <a href=\\\"index.html\\\">Top20</a> -\");\n\t\telse\n\t\t\tfprintf(file, \"- <a href=\\\"index%c.html\\\">Top20</a> -\", config.tag);\n\n\t\tfor (Counter = 0; Counter < SubnetCount; Counter++)\n\t\t\t{\n\t\t\tHostIp2CharIp(SubnetTable[Counter].ip, Buffer2);\n\t\t\tfprintf(file, \"- <a href=\\\"Subnet-%c-%s.html\\\">%s</a> -\", config.tag, Buffer2, Buffer2);\n\t\t\t}\n\n\t\tfprintf(file, \"<H1>%s - %s</H1></center>\", Buffer1, PeriodDesc);\n\t\tfprintf(file, \"<table width=\\\"100%%\\\" border=1 cellspacing=0>\\n\");\n\n        // PASS 1:  Write out the table\n\n\t\tfprintf(file, \"<TR bgcolor=lightblue><TD>Ip and Name<TD align=center>Total<TD align=center>Total Sent<TD align=center>Total Received<TD align=center>FTP<TD align=center>HTTP<TD align=center>P2P<TD align=center>TCP<TD align=center>UDP<TD align=center>ICMP\\n\");\n\t\tfor (tCounter=0, Counter=0; Counter < NumIps; Counter++)\n\t\t\t{\n            if (SubnetTable[SubnetCounter].ip == (SummaryData[Counter]->IP & SubnetTable[SubnetCounter].mask))\n\t\t\t\t{ // The ip belongs to this subnet\n\t\t\t\tPrintTableLine(file, SummaryData[Counter], tCounter++);\n    \t\t\t}\n\t\t\t}\n\n\t\tfprintf(file, \"</table>\\n\");\n\n\t\t// PASS 2: The graphs\n\t\tfor (Counter=0; Counter < NumIps; Counter++)\n\t\t\t{\n            if (SubnetTable[SubnetCounter].ip == (SummaryData[Counter]->IP & SubnetTable[SubnetCounter].mask))\n\t\t\t\t{ // The ip belongs to this subnet\n\t\t\t\tif (SummaryData[Counter]->Graph)\n\t\t\t\t\t{\n\t\t\t\t\tHostIp2CharIp(SummaryData[Counter]->IP, Buffer1);\n\t\t\t\t\trdns(HostName, SummaryData[Counter]->IP);\n\t\t\t\t\tfprintf(file, \"<a name=\\\"%s-%c\\\"></a><H1><a href=\\\"#top\\\">(Top)</a> %s - %s</H1><BR>\\nSend:<br>\\n<img src=%s-%c-S.png ALT=\\\"Sent traffic graph for %s\\\"><BR>\\n<img src=legend.gif ALT=\\\"Legend\\\"><br>\\nReceived:<br>\\n<img src=%s-%c-R.png ALT=\\\"Received traffic for %s\\\"><BR>\\n<img src=legend.gif ALT=\\\"Legend\\\"><br>\\n<BR>\\n\", Buffer1, config.tag, Buffer1, HostName, Buffer1, config.tag, Buffer1, Buffer1, config.tag, Buffer1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\tfprintf(file, \"</BODY></HTML>\\n\");\n\t\tfclose(file);\n\t\t}\n\n\tfree(SummaryData);\n\t}\n\nvoid GraphIp(struct IPDataStore *DataStore, struct SummaryData *SummaryData, time_t timestamp)\n    {\n    FILE *OutputFile;\n    char outputfilename[50];\n    gdImagePtr im, im2;\n    int white;\n    unsigned long long int YMax;\n\tchar CharIp[20];\n\n    time_t GraphBeginTime;\n\n\t// TODO: First determine if graph will be printed before creating image and drawing backround, etc\n\n\tif (DataStore->ip == 0)\n\t\tstrcpy(CharIp, \"Total\");\n\telse\n\t\tHostIp2CharIp(DataStore->ip, CharIp);\n\n    GraphBeginTime = timestamp - config.range;\n\n    im = gdImageCreate(XWIDTH, YHEIGHT);\n    white = gdImageColorAllocate(im, 255, 255, 255);\n    //gdImageFill(im, 10, 10, white);\n\n    im2 = gdImageCreate(XWIDTH, YHEIGHT);\n    white = gdImageColorAllocate(im2, 255, 255, 255);\n    //gdImageFill(im2, 10, 10, white);\n\n    YMax = GraphData(im, im2, DataStore, GraphBeginTime, SummaryData);\n    if (YMax != 0)\n        {\n        // Finish the graph\n        PrepareXAxis(im, timestamp);\n        PrepareYAxis(im, YMax);\n\n        PrepareXAxis(im2, timestamp);\n        PrepareYAxis(im2, YMax);\n\n        sprintf(outputfilename, \"./htdocs/%s-%c-S.png\", CharIp, config.tag);\n        OutputFile = fopen(outputfilename, \"wb\");    \n        gdImagePng(im, OutputFile);\n        fclose(OutputFile);\n\n        sprintf(outputfilename, \"./htdocs/%s-%c-R.png\", CharIp, config.tag);\n        OutputFile = fopen(outputfilename, \"wb\");\n        gdImagePng(im2, OutputFile);\n        fclose(OutputFile);\n        }\n    else\n        {\n        // The graph isn't worth clutering up the web pages with\n        sprintf(outputfilename, \"./htdocs/%s-%c-R.png\", CharIp, config.tag);\n        unlink(outputfilename);\n        sprintf(outputfilename, \"./htdocs/%s-%c-S.png\", CharIp, config.tag);\n        unlink(outputfilename);\n        }\n\n\tgdImageDestroy(im);\n\tgdImageDestroy(im2);\n    }\n\n// Returns YMax\nunsigned long long int GraphData(gdImagePtr im, gdImagePtr im2, struct IPDataStore *DataStore, time_t timestamp, struct SummaryData *SummaryData)\n    {\n    unsigned long long int YMax=0;\n\t\n\tstruct DataStoreBlock *CurrentBlock;\n    struct IPData *Data;\n\n\t// TODO: These should be a structure!!!!\n\t// TODO: This is an awfull lot of data to be allocated on the stack\n\n    unsigned long long total[XWIDTH];\n    unsigned long long icmp[XWIDTH];\n    unsigned long long udp[XWIDTH];\n    unsigned long long tcp[XWIDTH];\n\tunsigned long long ftp[XWIDTH];\n    unsigned long long http[XWIDTH];\n    unsigned long long p2p[XWIDTH];\n    int Count[XWIDTH];\n\n    unsigned long long total2[XWIDTH];\n    unsigned long long icmp2[XWIDTH];\n    unsigned long long udp2[XWIDTH];\n    unsigned long long tcp2[XWIDTH];\n\tunsigned long long ftp2[XWIDTH];\n    unsigned long long http2[XWIDTH];\n    unsigned long long p2p2[XWIDTH];\n\n    size_t DataPoints;\n    double x;\n    int xint;\n    int Counter;\n    char Buffer[30];\n    char Buffer2[50];\n    \n    int blue, lblue, red, yellow, purple, green, brown, black;\n    int blue2, lblue2, red2, yellow2, purple2, green2, brown2, black2;\n\n\tunsigned long long int SentPeak = 0;\n\tunsigned long long int ReceivedPeak = 0;\n\n    yellow   = gdImageColorAllocate(im, 255, 255, 0);\n    purple   = gdImageColorAllocate(im, 255, 0, 255);\n    green    = gdImageColorAllocate(im, 0, 255, 0);\n    blue     = gdImageColorAllocate(im, 0, 0, 255);\n\tlblue\t = gdImageColorAllocate(im, 128, 128, 255);\n    brown    = gdImageColorAllocate(im, 128, 0, 0);\n    red      = gdImageColorAllocate(im, 255, 0, 0);\n    black \t = gdImageColorAllocate(im, 0, 0, 0);\n    \n    yellow2  = gdImageColorAllocate(im2, 255, 255, 0);\n    purple2   = gdImageColorAllocate(im2, 255, 0, 255);\n    green2   = gdImageColorAllocate(im2, 0, 255, 0);\n    blue2    = gdImageColorAllocate(im2, 0, 0, 255);\n\tlblue2\t = gdImageColorAllocate(im2, 128, 128, 255);\n    brown2   = gdImageColorAllocate(im2, 128, 0, 0);\n    red2     = gdImageColorAllocate(im2, 255, 0, 0);\n    black2   = gdImageColorAllocate(im2, 0, 0, 0);\n\n\tCurrentBlock = DataStore->FirstBlock;\n\tData = CurrentBlock->Data;\n    DataPoints = CurrentBlock->NumEntries;\n\n\tmemset(SummaryData, 0, sizeof(struct SummaryData));\n\tSummaryData->IP = Data[0].ip;\n\t\n    memset(Count, 0, sizeof(Count[0])*XWIDTH);\n\n    memset(total, 0, sizeof(total[0])*XWIDTH);\n    memset(icmp, 0, sizeof(total[0])*XWIDTH);\n    memset(udp, 0, sizeof(total[0])*XWIDTH);\n    memset(tcp, 0, sizeof(total[0])*XWIDTH);\n\tmemset(ftp, 0, sizeof(total[0])*XWIDTH);\n    memset(http, 0, sizeof(total[0])*XWIDTH);\n    memset(p2p, 0, sizeof(total[0])*XWIDTH);\n\n    memset(total2, 0, sizeof(total[0])*XWIDTH);\n    memset(icmp2, 0, sizeof(total[0])*XWIDTH);\n    memset(udp2, 0, sizeof(total[0])*XWIDTH);\n    memset(tcp2, 0, sizeof(total[0])*XWIDTH);\n    memset(ftp2, 0, sizeof(total[0])*XWIDTH);\n    memset(http2, 0, sizeof(total[0])*XWIDTH);\n    memset(p2p2, 0, sizeof(total[0])*XWIDTH);\n\n\t// Change this to just run through all the datapoints we have stored in ram\n\n\t// Sum up the bytes/second\n    while(DataPoints > 0)  // We have data to graph\n        {\n        for (Counter = 0; Counter < DataPoints; Counter++)  // Graph it all\n            {\n            x = (Data[Counter].timestamp-timestamp)*((XWIDTH-XOFFSET)/config.range)+XOFFSET;        \n            xint = x;\n\n            if (xint >= 0 && xint < XWIDTH)\n                {\n                Count[xint]++;\n\t\t\t\t\n\t\t\t\tif (Data[Counter].Send.total > SentPeak)\n\t\t\t\t\tSentPeak = Data[Counter].Send.total;\n       \t        total[xint] += Data[Counter].Send.total;\n           \t    icmp[xint] += Data[Counter].Send.icmp;\n               \tudp[xint] += Data[Counter].Send.udp;\n                tcp[xint] += Data[Counter].Send.tcp;\n\t\t\t\tftp[xint] += Data[Counter].Send.ftp;\n       \t        http[xint] += Data[Counter].Send.http;\n\t\t\t\tp2p[xint] += Data[Counter].Send.p2p;\n\n                if (Data[Counter].Receive.total > ReceivedPeak)\n   \t            \tReceivedPeak = Data[Counter].Receive.total;\n       \t        total2[xint] += Data[Counter].Receive.total;\n           \t    icmp2[xint] += Data[Counter].Receive.icmp;\n               \tudp2[xint] += Data[Counter].Receive.udp;\n                tcp2[xint] += Data[Counter].Receive.tcp;\n\t\t\t\tftp2[xint] += Data[Counter].Receive.ftp;\n       \t        http2[xint] += Data[Counter].Receive.http;\n\t\t\t\tp2p2[xint] += Data[Counter].Receive.p2p;\n                }\n            }\n\n\t\tCurrentBlock = CurrentBlock->Next;\n\t\t\t\n\t\tif (CurrentBlock)\n\t\t\t{\n         \tData = CurrentBlock->Data;\n\t\t\tDataPoints = CurrentBlock->NumEntries;\n\t\t\t}\n\t\telse\n\t\t\tDataPoints = 0;\t\t\n        }\n\n\t// Convert SentPeak and ReceivedPeak from bytes to bytes/second\n\tSentPeak /= config.interval; ReceivedPeak /= config.interval;\n\n    // Preform the Average\n    for(Counter=XOFFSET+1; Counter < XWIDTH; Counter++)\n            {\n            if (Count[Counter] > 0)\n                {\n            \tSummaryData->Total += total[Counter] + total2[Counter];\n\t\t\t\tSummaryData->TotalSent += total[Counter];\n \t\t\t\tSummaryData->TotalReceived += total2[Counter];\n\t\t\t\tSummaryData->TCP += tcp[Counter] + tcp2[Counter];\n\t\t\t\tSummaryData->FTP += ftp[Counter] + ftp2[Counter];\n\t\t\t\tSummaryData->HTTP += http[Counter] + http2[Counter];\n\t\t\t\tSummaryData->P2P += p2p[Counter] + p2p2[Counter];\n\t\t\t\tSummaryData->UDP += udp[Counter] + udp2[Counter];\n\t\t\t\tSummaryData->ICMP += icmp[Counter] + icmp2[Counter];\n\n                // Preform the average\n                total[Counter] /= (Count[Counter]*config.interval);\n                tcp[Counter] /= (Count[Counter]*config.interval);\n                ftp[Counter] /= (Count[Counter]*config.interval);\n                http[Counter] /= (Count[Counter]*config.interval);\n\t\t\t\tp2p[Counter] /= (Count[Counter]*config.interval);\n                udp[Counter] /= (Count[Counter]*config.interval);\n                icmp[Counter] /= (Count[Counter]*config.interval);\n\t\t\t\t\t\t\t\t\n                total2[Counter] /= (Count[Counter]*config.interval);\n                tcp2[Counter] /= (Count[Counter]*config.interval);\n\t\t\t\tftp2[Counter] /= (Count[Counter]*config.interval);\n                http2[Counter] /= (Count[Counter]*config.interval);\n\t\t\t\tp2p2[Counter] /= (Count[Counter]*config.interval);\n                udp2[Counter] /= (Count[Counter]*config.interval);\n                icmp2[Counter] /= (Count[Counter]*config.interval);\n\n\n                if (total[Counter] > YMax)\n                    YMax = total[Counter];\n                \n                if (total2[Counter] > YMax)\n                    YMax = total2[Counter];\n                }\n            }\n\n    YMax += YMax*0.05;    // Add an extra 5%\n\t\n    if ((SummaryData->IP != 0 && SummaryData->Total < config.graph_cutoff))\n\t\t{\n\t\tSummaryData->Graph = FALSE;\n        return(0);\n\t\t}\n\telse\n        SummaryData->Graph = TRUE;\n\n    // Plot the points\n    for(Counter=XOFFSET+1; Counter < XWIDTH; Counter++)    \n            {\n            if (Count[Counter] > 0)\n                {\n                // Convert the bytes/sec to y coords\n                total[Counter] = (total[Counter]*(YHEIGHT-YOFFSET))/YMax;\n                tcp[Counter] = (tcp[Counter]*(YHEIGHT-YOFFSET))/YMax;\n                ftp[Counter] = (ftp[Counter]*(YHEIGHT-YOFFSET))/YMax;\n                http[Counter] = (http[Counter]*(YHEIGHT-YOFFSET))/YMax;\n                p2p[Counter] = (p2p[Counter]*(YHEIGHT-YOFFSET))/YMax;\n                udp[Counter] = (udp[Counter]*(YHEIGHT-YOFFSET))/YMax;\n                icmp[Counter] = (icmp[Counter]*(YHEIGHT-YOFFSET))/YMax;\n\n                total2[Counter] = (total2[Counter]*(YHEIGHT-YOFFSET))/YMax;\n                tcp2[Counter] = (tcp2[Counter]*(YHEIGHT-YOFFSET))/YMax;\n                ftp2[Counter] = (ftp2[Counter]*(YHEIGHT-YOFFSET))/YMax;\n                http2[Counter] = (http2[Counter]*(YHEIGHT-YOFFSET))/YMax;\n\t\t\t\tp2p2[Counter] = (p2p2[Counter]*(YHEIGHT-YOFFSET))/YMax;\n                udp2[Counter] = (udp2[Counter]*(YHEIGHT-YOFFSET))/YMax;\n                icmp2[Counter] = (icmp2[Counter]*(YHEIGHT-YOFFSET))/YMax;\n\n                // Stack 'em up!\n                // Total is stacked from the bottom\n                // Icmp is on the bottom too\n                // Udp is stacked on top of icmp\n                udp[Counter] += icmp[Counter];\n\t\t\t\tudp2[Counter] += icmp2[Counter];\n                // TCP and p2p are stacked on top of Udp\n                tcp[Counter] += udp[Counter];\n                tcp2[Counter] += udp2[Counter];\n                p2p[Counter] += udp[Counter];\n                p2p2[Counter] += udp2[Counter];\n\t\t\t\t// Http is stacked on top of p2p\n                http[Counter] += p2p[Counter];\n                http2[Counter] += p2p2[Counter];\n\t\t\t\t// Ftp is stacked on top of http\n                ftp[Counter] += http[Counter];\n                ftp2[Counter] += http2[Counter];\n\n                // Plot them!\n\t\t\t\t// Sent\n                gdImageLine(im, Counter, (YHEIGHT-YOFFSET) - total[Counter], Counter, YHEIGHT-YOFFSET-1, yellow);\n                gdImageLine(im, Counter, (YHEIGHT-YOFFSET) - icmp[Counter], Counter, YHEIGHT-YOFFSET-1, red);\n                gdImageLine(im, Counter, (YHEIGHT-YOFFSET) - udp[Counter], Counter, (YHEIGHT-YOFFSET) - icmp[Counter] - 1, brown);\n                gdImageLine(im, Counter, (YHEIGHT-YOFFSET) - tcp[Counter], Counter, (YHEIGHT-YOFFSET) - udp[Counter] - 1, green);\n                gdImageLine(im, Counter, (YHEIGHT-YOFFSET) - p2p[Counter], Counter, (YHEIGHT-YOFFSET) - udp[Counter] - 1, purple);\n                gdImageLine(im, Counter, (YHEIGHT-YOFFSET) - http[Counter], Counter, (YHEIGHT-YOFFSET) - p2p[Counter] - 1, blue);\n                gdImageLine(im, Counter, (YHEIGHT-YOFFSET) - ftp[Counter], Counter, (YHEIGHT-YOFFSET) - http[Counter] - 1, lblue);\n\t\t\t\t\t\t\t\t\n\t\t\t\t// Receive\n                gdImageLine(im2, Counter, (YHEIGHT-YOFFSET) - total2[Counter], Counter, YHEIGHT-YOFFSET-1, yellow2);\n                gdImageLine(im2, Counter, (YHEIGHT-YOFFSET) - icmp2[Counter], Counter, YHEIGHT-YOFFSET-1, red2);\n                gdImageLine(im2, Counter, (YHEIGHT-YOFFSET) - udp2[Counter], Counter, (YHEIGHT-YOFFSET) - icmp2[Counter] - 1, brown2);\n                gdImageLine(im2, Counter, (YHEIGHT-YOFFSET) - tcp2[Counter], Counter, (YHEIGHT-YOFFSET) - udp2[Counter] - 1, green2);\n                gdImageLine(im2, Counter, (YHEIGHT-YOFFSET) - p2p2[Counter], Counter, (YHEIGHT-YOFFSET) - udp2[Counter] - 1, purple2);\n                gdImageLine(im2, Counter, (YHEIGHT-YOFFSET) - http2[Counter], Counter, (YHEIGHT-YOFFSET) - p2p2[Counter] - 1, blue2);\n                gdImageLine(im2, Counter, (YHEIGHT-YOFFSET) - ftp2[Counter], Counter, (YHEIGHT-YOFFSET) - http2[Counter] - 1, lblue2);\n\n\n                }\n            }\n\n\tif (SentPeak < 1024/8)\n\t\tsnprintf(Buffer2, 50, \"Peak Send Rate: %.1f Bits/sec\", (double)SentPeak*8);\n\telse if (SentPeak < (1024*1024)/8)\n\t\tsnprintf(Buffer2, 50, \"Peak Send Rate: %.1f KBits/sec\", ((double)SentPeak*8.0)/1024.0);\n\telse snprintf(Buffer2, 50, \"Peak Send Rate: %.1f MBits/sec\", ((double)SentPeak*8.0)/(1024.0*1024.0));\n\t\t\t\t\t\t\t\t\n\tif (SummaryData->TotalSent < 1024)\n\t\tsnprintf(Buffer, 30, \"Sent %.1f Bytes\", (double)SummaryData->TotalSent);\t\t\t\t\t\n\telse if (SummaryData->TotalSent < 1024*1024)\n\t\tsnprintf(Buffer, 30, \"Sent %.1f KBytes\", (double)SummaryData->TotalSent/1024.0);\n\telse snprintf(Buffer, 30, \"Sent %.1f MBytes\", (double)SummaryData->TotalSent/(1024.0*1024.0));\n\n\tgdImageString(im, gdFontSmall, XOFFSET+5,  YHEIGHT-20, Buffer, black);\n\tgdImageString(im, gdFontSmall, XWIDTH/2+XOFFSET/2,  YHEIGHT-20, Buffer2, black);\t\t\t\t\n\n\tif (ReceivedPeak < 1024/8)\n       \tsnprintf(Buffer2, 50, \"Peak Receive Rate: %.1f Bits/sec\", (double)ReceivedPeak*8);\n    else if (ReceivedPeak < (1024*1024)/8)\n    \tsnprintf(Buffer2, 50, \"Peak Receive Rate: %.1f KBits/sec\", ((double)ReceivedPeak*8.0)/1024.0);               \n\telse snprintf(Buffer2, 50, \"Peak Receive Rate: %.1f MBits/sec\", ((double)ReceivedPeak*8.0)/(1024.0*1024.0));\n\n    if (SummaryData->TotalReceived < 1024)\n        snprintf(Buffer, 30, \"Received %.1f Bytes\", (double)SummaryData->TotalReceived);\n    else if (SummaryData->TotalReceived < 1024*1024)\n        snprintf(Buffer, 30, \"Received %.1f KBytes\", (double)SummaryData->TotalReceived/1024.0);\n    else snprintf(Buffer, 30, \"Received %.1f MBytes\", (double)SummaryData->TotalReceived/(1024.0*1024.0));\n                                                                                                              \n    gdImageString(im2, gdFontSmall, XOFFSET+5,  YHEIGHT-20, Buffer, black2);                \n    gdImageString(im2, gdFontSmall, XWIDTH/2+XOFFSET/2,  YHEIGHT-20, Buffer2, black2);\n\n    return(YMax);\n    }\n\nvoid PrepareYAxis(gdImagePtr im, unsigned long long int YMax)\n    {\n    char buffer[20];\n\n\tchar YLegend;\n\tlong long int Divisor;\n\n    int black;\n    float YTic = 0;\n    double y;\n    long int YStep;\n    \n    black = gdImageColorAllocate(im, 0, 0, 0);\n    gdImageLine(im, XOFFSET, 0, XOFFSET, YHEIGHT, black);\n\n    YLegend = ' ';\n    Divisor = 1;\n    if (YMax*8 > 1024*2)\n        {\n        Divisor = 1024;    // Display in K\n        YLegend = 'k';\n        }\n    if (YMax*8 > 1024*1024*2)\n        {\n        Divisor = 1024*1024; // Display in M\n        YLegend = 'm';\n        }\n    if (YMax*8 > (long long)1024*1024*1024*2)\n        {\n        Divisor = 1024*1024*1024; // Display in G\n        YLegend = 'g';\n        }\n\n    YStep = YMax/10;\n    if (YStep < 1)\n        YStep=1;\n    YTic=YStep;\n\n    while (YTic < (YMax - YMax/10))\n        {\n        y = (YHEIGHT-YOFFSET)-((YTic*(YHEIGHT-YOFFSET))/YMax);        \n\n        gdImageLine(im, XOFFSET, y, XWIDTH, y, black);        \n        snprintf(buffer, 20, \"%4.1f %cbits/s\", (float)(8.0*YTic)/Divisor, YLegend);\n        gdImageString(im, gdFontSmall, 3, y-7, buffer, black);        \n\n        YTic += YStep;\n        }\n    } \n\nvoid PrepareXAxis(gdImagePtr im, time_t timestamp)\n    {\n    char buffer[100];\n    int black, red;\n    time_t sample_begin, sample_end;    \n    struct tm *timestruct;\n    long int MarkTime;\n\tlong int MarkTimeStep;\n    double x;\n    \n    sample_begin=timestamp-config.range;\n    sample_end=sample_begin+config.interval;\n\n    black = gdImageColorAllocate(im, 0, 0, 0);\n    red   = gdImageColorAllocate(im, 255, 0, 0);\n\n    gdImageLine(im, 0, YHEIGHT-YOFFSET, XWIDTH, YHEIGHT-YOFFSET, black);\n\n    // ********************************************************************\n    // ****  Write the red day/month seperator bars\n    // ********************************************************************\n\n\tif ((24*60*60*(XWIDTH-XOFFSET))/config.range > (XWIDTH-XOFFSET)/10)\n\t\t{\n\t\t// Day bars\n\t    timestruct = localtime((time_t *)&sample_begin);\n    \ttimestruct->tm_sec = 0;\n\t    timestruct->tm_min = 0;\n    \ttimestruct->tm_hour = 0;\n\t    MarkTime = mktime(timestruct);\n            \n    \tx = (MarkTime-sample_begin)*( ((double)(XWIDTH-XOFFSET)) / config.range) + XOFFSET;\n\t    while (x < XOFFSET)\n    \t    {\n        \tMarkTime += (24*60*60);\n\t        x = (MarkTime-sample_begin)*((XWIDTH-XOFFSET)/config.range) + XOFFSET;\n    \t    }\n\n\t    while (x < (XWIDTH-10))\n    \t    {\n        \t// Day Lines\n\t        gdImageLine(im, x, 0, x, YHEIGHT-YOFFSET, red);\n    \t    gdImageLine(im, x+1, 0, x+1, YHEIGHT-YOFFSET, red);\n\t\n    \t    timestruct = localtime((time_t *)&MarkTime);\n\t        strftime(buffer, 100, \"%a, %b %d\", timestruct);\n    \t    gdImageString(im, gdFontSmall, x-30,  YHEIGHT-YOFFSET+10, buffer, black);        \n\n\t        // Calculate Next x\n    \t    MarkTime += (24*60*60);\n        \tx = (MarkTime-sample_begin)*((XWIDTH-XOFFSET)/config.range) + XOFFSET;\n\t        }\n\t\t}\n\telse\n\t\t{\n    \t// Month Bars\n        timestruct = localtime((time_t *)&sample_begin);\n        timestruct->tm_sec = 0;\n        timestruct->tm_min = 0;\n        timestruct->tm_hour = 0;\n\t\ttimestruct->tm_mday = 1;\n\t\ttimestruct->tm_mon--; // Start the month before the sample\n        MarkTime = mktime(timestruct);\n\n    \tx = (MarkTime-sample_begin)*( ((double)(XWIDTH-XOFFSET)) / config.range) + XOFFSET;\n\t    while (x < XOFFSET)\n    \t    {\n\t\t\ttimestruct->tm_mon++;\n        \tMarkTime = mktime(timestruct);\n\t        x = (MarkTime-sample_begin)*((XWIDTH-XOFFSET)/config.range) + XOFFSET;\n    \t    }\n\n\t    while (x < (XWIDTH-10))\n    \t    {\n        \t// Month Lines\n\t        gdImageLine(im, x, 0, x, YHEIGHT-YOFFSET, red);\n    \t    gdImageLine(im, x+1, 0, x+1, YHEIGHT-YOFFSET, red);\n\t\n    \t    timestruct = localtime((time_t *)&MarkTime);\n\t        strftime(buffer, 100, \"%b\", timestruct);\n    \t    gdImageString(im, gdFontSmall, x-6,  YHEIGHT-YOFFSET+10, buffer, black);        \n\n\t        // Calculate Next x\n            timestruct->tm_mon++;\n            MarkTime = mktime(timestruct);\n        \tx = (MarkTime-sample_begin)*((XWIDTH-XOFFSET)/config.range) + XOFFSET;\n\t        }\t\t\t\t\n\t\t}\n\n    // ********************************************************************\n    // ****  Write the tic marks\n    // ********************************************************************\n\n    timestruct = localtime((time_t *)&sample_begin);\n    timestruct->tm_sec = 0;\n    timestruct->tm_min = 0;\n    timestruct->tm_hour = 0;\n    MarkTime = mktime(timestruct);\n\n\tif ((6*60*60*(XWIDTH-XOFFSET))/config.range > 10) // pixels per 6 hours is more than 2\n\t\tMarkTimeStep = 6*60*60; // Major ticks are 6 hours\n\telse if ((24*60*60*(XWIDTH-XOFFSET))/config.range > 10)\n\t\tMarkTimeStep = 24*60*60; // Major ticks are 24 hours;\n\telse\n\t\treturn; // Done\t\t\n\n\tx = (MarkTime-sample_begin)*((XWIDTH-XOFFSET)/config.range) + XOFFSET;\n\twhile (x < XOFFSET)\n   \t\t{\n\t\tMarkTime += MarkTimeStep;\n\t    x = (MarkTime-sample_begin)*((XWIDTH-XOFFSET)/config.range) + XOFFSET;\n    \t}\n\n    while (x < (XWIDTH-10))\n    \t{\n\t    if (x > XOFFSET) {\n    \t\tgdImageLine(im, x, YHEIGHT-YOFFSET-5, x, YHEIGHT-YOFFSET+5, black);\n\t       \tgdImageLine(im, x+1, YHEIGHT-YOFFSET-5, x+1, YHEIGHT-YOFFSET+5, black);\n        \t}\n\t\tMarkTime += MarkTimeStep;\n   \t\tx = (MarkTime-sample_begin)*((XWIDTH-XOFFSET)/config.range) + XOFFSET;\n        }\n\n    timestruct = localtime((time_t *)&sample_begin);\n    timestruct->tm_sec = 0;\n    timestruct->tm_min = 0;\n    timestruct->tm_hour = 0;\n    MarkTime = mktime(timestruct);\n\n\tif ((60*60*(XWIDTH-XOFFSET))/config.range > 2) // pixels per hour is more than 2\n\t\tMarkTimeStep = 60*60;  // Minor ticks are 1 hour\n\telse if ((6*60*60*(XWIDTH-XOFFSET))/config.range > 2)\n\t\tMarkTimeStep = 6*60*60; // Minor ticks are 6 hours\n\telse if ((24*60*60*(XWIDTH-XOFFSET))/config.range > 2)\n\t\tMarkTimeStep = 24*60*60;\n\telse\n\t\treturn; // Done\n\n\t// Draw Minor Tic Marks\n\tx = (MarkTime-sample_begin)*((XWIDTH-XOFFSET)/config.range) + XOFFSET;\n\n\twhile (x < XOFFSET)\n   \t\t{\n\t\tMarkTime += MarkTimeStep;\n\t    x = (MarkTime-sample_begin)*((XWIDTH-XOFFSET)/config.range) + XOFFSET;\n    \t}\n\n    while (x < (XWIDTH-10))\n        {\n\t    if (x > XOFFSET) {\n    \t\tgdImageLine(im, x, YHEIGHT-YOFFSET, x, YHEIGHT-YOFFSET+5, black);\n        \tgdImageLine(im, x+1, YHEIGHT-YOFFSET, x+1, YHEIGHT-YOFFSET+5, black);\n            }\n\t    MarkTime+=MarkTimeStep;\n    \tx = (MarkTime-sample_begin)*((XWIDTH-XOFFSET)/config.range) + XOFFSET;\n        }\n    }\n\n",
			"file": "graph.c",
			"file_size": 33795,
			"file_write_time": 133378134238544837,
			"settings":
			{
				"buffer_size": 33794,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					5,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAP4PAAAAAAAA/w8AAAAAAAAAAAAA/w8AAAAAAAAAEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/g8AAAAAAAD+DwAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "char"
					},
					"BAAAAAAQAAAAAAAAARAAAAAAAAAAAAAAARAAAAAAAAACEAAAAAAAAAAAAAACEAAAAAAAAAMQAAAAAAAAAAAAAAMQAAAAAAAABBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAABAAAAAAAAAAEAAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": " bu"
					},
					"AwAAAAQQAAAAAAAABRAAAAAAAAAAAAAABRAAAAAAAAAGEAAAAAAAAAAAAAAGEAAAAAAAAAcQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABBAAAAAAAAAEEAAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					2,
					"left_delete",
					null,
					"AgAAAAYQAAAAAAAABhAAAAAAAAABAAAAdQUQAAAAAAAABRAAAAAAAAABAAAAYg",
					"AQAAAAAAAAABAAAABxAAAAAAAAAHEAAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "Buffer"
					},
					"BgAAAAUQAAAAAAAABhAAAAAAAAAAAAAABhAAAAAAAAAHEAAAAAAAAAAAAAAHEAAAAAAAAAgQAAAAAAAAAAAAAAgQAAAAAAAACRAAAAAAAAAAAAAACRAAAAAAAAAKEAAAAAAAAAAAAAAKEAAAAAAAAAsQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABRAAAAAAAAAFEAAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": "1b"
					},
					"AgAAAAsQAAAAAAAADBAAAAAAAAAAAAAADBAAAAAAAAANEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACxAAAAAAAAALEAAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAA0QAAAAAAAADxAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADRAAAAAAAAANEAAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "5"
					},
					"AQAAAA4QAAAAAAAADxAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADhAAAAAAAAAOEAAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAA8QAAAAAAAAEBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADxAAAAAAAAAPEAAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAABEQAAAAAAAAEhAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAERAAAAAAAAAREAAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AQAAAMEQAAAAAAAAxBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1RAAAAAAAADVEAAAAAAAAAAAAAAAAPC/"
				],
				[
					54,
					1,
					"",
					null,
					"AgAAAK0RAAAAAAAAthEAAAAAAAAAAAAAthEAAAAAAAC2EQAAAAAAAAoAAABJUEhvc3ROYW1l",
					"AQAAAAAAAAABAAAArREAAAAAAAC3EQAAAAAAAAAAAAAAAPC/"
				],
				[
					57,
					1,
					"right_delete",
					null,
					"AQAAALYRAAAAAAAAthEAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAAthEAAAAAAAC2EQAAAAAAAAAAAAAAAPC/"
				],
				[
					71,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAA0SAAAAAAAADhIAAAAAAAAAAAAADhIAAAAAAAAPEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADRIAAAAAAAANEgAAAAAAAAAAAAAAAPC/"
				],
				[
					77,
					1,
					"",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAACPggAAAAAAAAAAAAAAAPC/"
				],
				[
					91,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAF4RAAAAAAAAXxEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXhEAAAAAAABeEQAAAAAAAAAAAAAAAPC/"
				],
				[
					97,
					1,
					"right_delete",
					null,
					"AQAAAAASAAAAAAAAABIAAAAAAAABAAAACQ",
					"AQAAAAAAAAABAAAAABIAAAAAAAAAEgAAAAAAAAAAAAAAAFZA"
				],
				[
					101,
					1,
					"left_delete",
					null,
					"AQAAAEASAAAAAAAAQBIAAAAAAAABAAAACQ",
					"AQAAAAAAAAABAAAAQRIAAAAAAABBEgAAAAAAAAAAAAAAAFZA"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/jim/development/bandwidthd2023",
		"/home/jim/development/bandwidthd2023/etc"
	],
	"file_history":
	[
		"/home/jim/development/bandwidthd2023/graph.c",
		"/home/jim/development/bandwidthd2023/bandwidthd.h",
		"/home/jim/development/bandwidthd2023/bandwidthd.spec",
		"/home/jim/development/bandwidthd2023/httpd.conf",
		"/home/jim/development/bandwidthd2023/phphtdocs/graph.php",
		"/home/jim/Books/ruby-deep-dive/ruby-deep-dive-v7/interactive-exercises.rb",
		"/home/jim/development/websites/jamesmcbrideus/index.html",
		"/home/jim/development/apps/apoxeia/log/capistrano.log",
		"/home/jim/development/apps/apoxeia/config/nginx-thecarringtonfirm.com.conf",
		"/home/jim/development/apps/apoxeia/yarn.list.txt",
		"/home/jim/development/apps/apoxeia/node_modules/node-forge/package.json",
		"/home/jim/development/apps/apoxeia/config/nginx-thecarringtonfirm.net.conf",
		"/home/jim/development/apps/apoxeia/config/nginx.conf.old",
		"/home/jim/development/apps/apoxeia/config/nginx.conf.older",
		"/home/jim/development/apps/apoxeia/config/nginx-thecarringtonfirm.com.conf-working",
		"/home/jim/development/apps/apoxeia/config/nginx-pedesis.us.conf",
		"/home/jim/development/apps/apoxeia/config/nginx-apoxeia.com.conf",
		"/home/jim/development/apps/apoxeia/config/schedule.rb",
		"/home/jim/development/apps/apoxeia/Gemfile",
		"/home/jim/development/apps/apoxeia/new_pc_setup.sh",
		"/media/jim/W10-USB-3-21-20/boot/grub/grub.cfg",
		"/home/jim/development/apps/apoxeia/Beth-Terri_Email_Questions",
		"/home/jim/development/apps/apoxeia/app/controllers/users_controller.rb",
		"/home/jim/pc_setup_script_run_log.log",
		"/home/jim/bin/new_pc_setup.sh",
		"/home/jim/development/apps/apoxeia/config/deploy.rb"
	],
	"find":
	{
		"height": 44.0
	},
	"find_in_files":
	{
		"height": 116.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"HostIp2CharIp",
			"rdns",
			"Data",
			"HostIp2CharIp",
			"rdns",
			"HostName",
			"PrintTableline",
			"Ip and Name",
			"php ",
			"phphtdocs",
			"php",
			"end",
			"(\",\"),",
			"is not b"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "graph.c",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 33794,
						"regions":
						{
						},
						"selection":
						[
							[
								4672,
								4672
							]
						],
						"settings":
						{
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3134.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 32.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.SublimeLinter":
	{
		"height": 0.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 313.0
	},
	"pinned_build_system": "",
	"project": "bandwidth2023.sublime-project",
	"replace":
	{
		"height": 60.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"nginx",
				"config/nginx-thecarringtonfirm.com.conf"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 166.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
